
# This example config file uses a number of the custom modules available in galsim_extra including
#     FocalPlane output type
#     MixedScene stamp type
#     CosmosR50, CosmosFlux value types along with cosmos_sampler input type
#     LogNormal value type
#     OffChip value type
modules:
    - galsim_extra


# Some variable definitions that let us define things here and then use them again later
# via either the YAML tag (e.g. *run) or in an eval string (e.g. '$run').
eval_variables:

    srun: &run "001"

    # These make it easier to include the right value in the truth catalog.
    fgal_hlr:
        type: List
        items:
        - 0.
        - '@bright_gal.items.0.half_light_radius'
        - '@faint_gal.items.0.half_light_radius'
        - '@nearby_gal.items.0.half_light_radius'
        index: '@current_obj_type_index'

    fbulge_g1:
        type: List
        items:
        - 0.
        - '$(@bright_gal.items.0.ellip).g1'
        - '$(@faint_gal.items.0.ellip).g1'
        - '$(@nearby_gal.items.0.ellip).g1'
        index: '@current_obj_type_index'

    fbulge_g2:
        type: List
        items:
        - 0.
        - '$(@bright_gal.items.0.ellip).g2'
        - '$(@faint_gal.items.0.ellip).g2'
        - '$(@nearby_gal.items.0.ellip).g2'
        index: '@current_obj_type_index'

    fdisk_g1:
        type: List
        items:
        - 0.
        - '$(@bright_gal.items.1.ellip).g1'
        - '$(@faint_gal.items.1.ellip).g1'
        - '$(@nearby_gal.items.1.ellip).g1'
        index: '@current_obj_type_index'

    fdisk_g2:
        type: List
        items:
        - 0.
        - '$(@bright_gal.items.1.ellip).g2'
        - '$(@faint_gal.items.1.ellip).g2'
        - '$(@nearby_gal.items.1.ellip).g2'
        index: '@current_obj_type_index'


# We have several different kinds of objects that we draw.
#
# "Bright" galaxy models are bulge + disk + knots of star formation
#
# This follows the model used in Sheldon & Huff 2017
#
# The knots are just point sources, distributed according to
# a random walk
#
# All components have the same r50
#
# The bulge and disk have independent ellipticities
# The bulge has g1,g2 scatter of 0.1 (0.2 in eta)
# The disk  has g1,g2 scatter of 0.2 (0.4 in eta)
#
# The knots have the same ellip as the disk
#
# The bulge fraction is random, drawn from [0,1]
# The fraction of the light in the disk is further
# divided between the smooth component and the knots,
# also drawn as a fraction between [0,1]
#
# The scale radius and flux are drawn jointly from the
# COSMOS 25.2 limited sample
bright_gal:
    type: Sum
    items:
        -
            type: DeVaucouleurs
            half_light_radius:
                type: CosmosR50
            flux: { type: Random, min: 0, max: 1 }
            ellip:
                type: Eta1Eta2
                # eta ~ 0.2 corresponds to g ~ 0.1
                eta1: { type: RandomGaussian, sigma: 0.2 }
                eta2: { type: RandomGaussian, sigma: 0.2 }
        -
            type: Exponential
            half_light_radius: '@bright_gal.items.0.half_light_radius'
            flux:
                type: Eval
                str: 'smooth_frac * (1. - @bright_gal.items.0.flux)'
                fsmooth_frac: { type: Random, min: 0, max: 1 }
            ellip:
                type: Eta1Eta2
                # eta ~ 0.4 corresponds to g ~ 0.2
                eta1: { type: RandomGaussian, sigma: 0.4 }
                eta2: { type: RandomGaussian, sigma: 0.4 }
        -
            type: RandomWalk
            npoints: 100
            half_light_radius: '@bright_gal.items.0.half_light_radius'
            # (relative) flux is 1 - the sum of the other two.
            ellip: '@bright_gal.items.1.ellip'
    flux:
        type: Eval
        # Scale flux up by a factor of 250
        str: "250.0 * cosmos_flux"
        fcosmos_flux: { type: CosmosFlux }

# Faint galaxies use the same population as the bright sample, but scaled
# to lower flux and size.  This isn't ideal, we end up with extra galaxies
# where the two populations overlap.
faint_gal:
    template: :bright_gal  # Nothing before the : means use a field from the current file
    scale_flux: 0.1
    dilate: 0.5


# Nearby galaxies are larger and proportionally brighter.
# We will make this rare as well.
nearby_gal:
    template: :bright_gal
    scale_flux: 25
    dilate: 5.0

# Stars are basically a delta function, so they end up as just the PSF.
star:
    type: Gaussian  # Basically a delta function.
    sigma: 1.e-6
    flux:
        type: RandomDistribution
        # looks like the slope for the bright end stars in DES r band
        function: x**-1.5
        x_min: 1000.0
        x_max: 1.0e+06

# The PSF is coherent across the full field of view.
# The size has a polynomial component where it gets larger near the edges to
# simulate a defocus kind of optical feature.  There is also an atmospheric
# part using a Gaussian process power spectrum model for the shape and size.
psf:
    type: Moffat
    beta: 2.5
    fwhm: '$fwhm_central + fwhm_a * (focal_r/focal_rmax)**2'
    ellip:
        type: PowerSpectrumShear
    magnify:
        type: PowerSpectrumMagnification

stamp:
    # A custom stamp type in galsim_extra that lets you have multiple kinds of
    # objects, each with their own base-level field.
    type: MixedScene

    objects:
        # These give the probability of picking each kind of object.  The
        # choice of which one is picked for a given object is written to the
        # base dict as base['current_obj_type'] and is thus available as
        # @current_obj_type.  The actual constructed object is similarly
        # available as @current_obj.  And the type by number in this list
        # (starting with 0 for the first) is @current_obj_type_index.
        star:       0.10
        bright_gal: 0.14
        nearby_gal: 0.001
        faint_gal:  0.80
        # Note: it's fine that these don't add to 1.  They will be renormalized automatically

    draw_method: phot

    shear:
        type: G1G2
        g1:
            type: List
            items:
            - 0.        # stars
            - 0.01      # bright gals
            - 0.001     # 10x smaller for nearby gals
            - 0.02      # 2x larger for fainter (more distant) gals
            index: '@current_obj_type_index'
        g2: 0.00

    # This is purely for efficiency.  All the objects in the scene are nominally
    # built for every chip.  That way objects near a chip boundary properly show
    # up on both chips.  However, if the object is far away from the chip we are
    # currently working on, this bit skips it right away to save some of the
    # calculations needed to build the object.
    skip:
        type: OffChip
        # This is probably conservative as a border:
        #min_dist: '$10 * gal_hlr + 10 * @psf.fwhm'

        # But the CosmosR50 calculation is slow.  So instead, just use a constant.
        # Even though this is even more conservative, it's actually faster, since it avoids the
        # slow gal_hlr calculation for most of the galaxies.
        min_dist: 100

image:
    type: Scattered

    noise:
        type: Poisson

    # Note: The real distribution of sky levels probably isn't flat.  It's probably bimodal,
    # depending on whether the moon is up.  But this is probably ok for now.
    sky_level: { type: Random, min: 5000, max: 15000, index_key: exp_num }

    random_seed: 8675309

    # The number of objects across the full focal plane.
    nobjects:
        type: RandomPoisson
        mean: 5.0e5  # Expectation value is half a million objects total ~ 8k per chip
        index_key: exp_num

    xsize: 2048
    ysize: 4096

    world_pos:
        type: RADec
        ra:
            type: Radians
            theta: { type: Random, min: "$fov_minra.rad()", max: "$fov_maxra.rad()" }
        dec:
            type: Radians
            theta:
                type: RandomDistribution
                function: "math.cos(x)"  # Uniform on the sky means P(delta) ~ cos(delta)
                x_min: "$fov_mindec.rad()"
                x_max: "$fov_maxdec.rad()"

    wcs:
        # Go through the exp_list catalog and sequentially use each exposure once.
        type: Fits
        dir:
            type: Catalog
            col: 0
        file_name:
            type: FormattedStr
            format: "%s_%02d.fits.fz"
            items:
            - { type: Catalog, col: 1 }
            - "$chip_num + 1"

input:
    # Use analytic galaxies with size and flux parameters that match the distribution seen
    # in the COSMOS galaxies.
    cosmos_sampler:
        min_r50: 0.15
        max_r50: 1.0
        min_flux: 2.5
        max_flux: 100

    power_spectrum:
        index_key: exp_num
        # Heymans et al, 2012 found L0 ~= 3 arcmin, given as 180 arcsec here.
        e_power_function: '(k**2 + (1./180)**2)**(-11./6.)'
        b_power_function: '@input.power_spectrum.e_power_function'
        units: arcsec
        grid_spacing: 10
        ngrid: '$math.ceil(2*focal_rmax / @input.power_spectrum.grid_spacing)'
        center: 0,0
        variance: '$rms_e**2'  # rms_e is given in meta_params

    catalog:
        # This catalog has a list of directories and exposure names (the root part before
        # the _chipnum.fits.fz suffix).
        # The version of this in the current directory works on my laptop (and just has one
        # exposure listed).  It would need to be changed to run at scale e.g. at BNL.
        file_name: exp_list
        #file_name: exp_list_bnl   # This one has the right directory for BNL computers

meta_params:
    # This field has information *about* the PSF (or the exposure in general), which will be used
    # by the psf field to generate the specific PSFs at the location of each galaxy.
    # This is a custom field for use with the FocalPlane output type.
    # Variable names here are arbitrary, and will be evaluated once at the start of each
    # focal plane.  The values can be used by the psf field in eval statements.
    fwhm_central: { type: LogNormal, mean: 0.9, sigma: 0.1 }
    fwhm_a: { type: LogNormal, mean: 0.1, sigma: 0.1 }
    rms_e: 0.01

output:
    type: FocalPlane

    # The number of exposures to build
    # Note: the FocalPlane output type adds another available index key, exp_num.  This can
    # be used as an index_key instead of the usual file_num, image_num, or obj_num.  You can
    # also access it in eval statements as just exp_num.
    nexp: '$(@input.catalog).getNObjects()'

    nchips: 62  # The number of chips per exposure

    dir: output
    file_name:
        type: FormattedStr
        format: "sim_%s_%02d.fits.fz"
        items:
        - { type: Catalog, col: 1 }
        - "$chip_num + 1"

    truth:
        file_name :
            type: FormattedStr
            format: "truth_%s_%02d.fits"
            items:
            - { type: Catalog, col: 1 }
            - "$chip_num + 1"

        columns:
            num: obj_num
            x: "$image_pos.x"
            y: "$image_pos.y"

            psf_fwhm: psf.fwhm
            psf_e1: '$(@psf.ellip).e1'
            psf_e2: '$(@psf.ellip).e2'

            obj_type: '@current_obj_type'
            obj_type_index: '@current_obj_type_index'
            flux: "$(@current_obj).flux"
            shear_g1: stamp.shear.g1
            shear_g2: stamp.shear.g2

            gal_hlr: '$gal_hlr'
            bulge_g1: '$bulge_g1'
            bulge_g2: '$bulge_g2'
            disk_g1: '$disk_g1'
            disk_g2: '$disk_g2'

